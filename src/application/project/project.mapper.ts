import { Project } from 'src/domain/project/project.entity';
import {
  CreateProjectDTO,
  ProjectDTO,
  MediaDTO,
} from 'src/presentation/project/project.dto';
import { ProjectDB } from 'src/infra/db/project-db/project-db.entity';
import { MediaDB } from 'src/infra/db/media-db/media-db.entity';
import { Media, MediaType } from 'src/domain/project/media.entity';

export function fromDTO(dto: ProjectDTO): Project {
  return new Project(
    dto.id,
    dto.name,
    dto.shortDescription,
    dto.description,
    dto.views,
    dto.isPublished,
    dto.repositoryLink,
    dto.projectLink,
    dto.media?.map(
      (m: MediaDTO) => new Media(m.id, MediaType[m.type], m.url, m.alt),
    ),
  );
}

export function toDTO(entity: Project): ProjectDTO {
  return new ProjectDTO(
    entity.id,
    entity.name,
    entity.description,
    entity.isPublished,
    entity.views,
    entity.shortDescription,
    entity.repositoryLink,
    entity.projectLink || '',
    entity.media.map((m: Media) => ({
      id: m.id,
      type: m.type,
      url: m.url,
      alt: m.alt,
    })),
  );
}

export function fromCreateDTO(dto: CreateProjectDTO): Project {
  return new Project(
    '', // ID will be generated by the repository
    dto.name,
    dto.shortDescription,
    dto.description,
    0, // Initial views count
    dto.isPublished,
    dto.repositoryLink,
    dto.projectLink,
    dto.media?.map(
      (m: MediaDTO) => new Media(m.id, MediaType[m.type], m.url, m.alt),
    ),
  );
}

export function toDB(entity: Project): ProjectDB {
  const db = new ProjectDB();
  db.id = entity.id;
  db.name = entity.name;
  db.shortDescription = entity.shortDescription;
  db.description = entity.description;
  db.views = entity.views;
  db.isPublished = entity.isPublished;
  db.repositoryLink = entity.repositoryLink;
  db.projectLink = entity.projectLink;
  db.media = entity.media.map((m: Media) => {
    const row = new MediaDB();
    row.id = m.id;
    row.type = m.type as 'PHOTO' | 'VIDEO';
    row.url = m.url;
    row.alt = m.alt;
    return row;
  });
  return db;
}

export function fromDB(db: ProjectDB): Project {
  return new Project(
    db.id,
    db.name,
    db.shortDescription,
    db.description,
    db.views,
    db.isPublished,
    db.repositoryLink,
    db.projectLink,
    (db.media || []).map(
      (m) => new Media(m.id, MediaType[m.type], m.url, m.alt),
    ),
  );
}
