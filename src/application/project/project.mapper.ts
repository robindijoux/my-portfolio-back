import { Project } from 'src/domain/project/project.entity';
import {
  CreateProjectDTO,
  ProjectDTO,
  MediaDTO,
  TechnoDTO,
  SimpleTechnoDTO,
} from 'src/presentation/project/project.dto';
import { ProjectDB } from 'src/infra/db/project-db/project-db.entity';
import { MediaDB } from 'src/infra/db/media-db/media-db.entity';
import { TechnoDB } from 'src/infra/db/techno-db/techno-db.entity';
import { Media, MediaType } from 'src/domain/project/media.entity';
import { Techno } from 'src/domain/project/techno.entity';
import * as mediaMapper from '../media/media.mapper';

export function fromDTO(dto: ProjectDTO): Project {
  return new Project(
    dto.id,
    dto.name,
    dto.shortDescription,
    dto.description,
    dto.views,
    dto.isPublished,
    dto.createdAt,
    dto.featured,
    dto.repositoryLink,
    dto.projectLink,
    dto.media?.map((m: MediaDTO) => mediaMapper.fromDTO(m)),
  );
}

export function toDTO(entity: Project): ProjectDTO {
  return new ProjectDTO(
    entity.id,
    entity.name,
    entity.description,
    entity.isPublished,
    entity.views,
    entity.shortDescription,
    entity.createdAt,
    entity.featured,
    entity.repositoryLink,
    entity.projectLink || '',
    entity.media.map((m: Media) => mediaMapper.toDTO(m)), // Return full media objects for reading
    entity.techStack.map((t: Techno) => ({
      id: t.id,
      technology: t.technology,
      iconUrl: t.iconUrl,
    })),
  );
}

export function fromCreateDTO(dto: CreateProjectDTO): Project {
  return new Project(
    '', // ID will be generated by the repository
    dto.name,
    dto.shortDescription,
    dto.description,
    0, // Initial views count
    dto.isPublished,
    new Date(),
    dto.featured,
    dto.repositoryLink,
    dto.projectLink,
    [], // Media will be handled in the service, not here
    // Les technologies seront gérées dans le service, pas ici
    [],
  );
}

export function toDB(entity: Project): ProjectDB {
  const db = new ProjectDB();
  db.id = entity.id;
  db.name = entity.name;
  db.shortDescription = entity.shortDescription;
  db.description = entity.description;
  db.views = entity.views;
  db.isPublished = entity.isPublished;
  db.repositoryLink = entity.repositoryLink;
  db.projectLink = entity.projectLink;
  db.createdAt = entity.createdAt;
  db.featured = entity.featured;
  db.media = entity.media.map((m: Media) => mediaMapper.toDB(m));
  db.techStack = entity.techStack.map((t: Techno) => {
    const techRow = new TechnoDB();
    techRow.id = t.id;
    techRow.technology = t.technology;
    techRow.iconUrl = t.iconUrl;
    return techRow;
  });
  return db;
}

export function fromDB(db: ProjectDB): Project {
  return new Project(
    db.id,
    db.name,
    db.shortDescription,
    db.description,
    db.views,
    db.isPublished,
    db.createdAt,
    db.featured,
    db.repositoryLink,
    db.projectLink,
    (db.media || []).map((m) => mediaMapper.fromDB(m)),
    (db.techStack || []).map(
      (t) => new Techno(t.id, t.technology, t.iconUrl),
    ),
  );
}
