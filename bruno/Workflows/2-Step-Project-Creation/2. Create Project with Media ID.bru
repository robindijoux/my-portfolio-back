meta {
  name: 2. Create Project with Media ID
  type: http
  seq: 2
}

post {
  url: {{base_url}}/projects
  body: json
  auth: inherit
}

body:json {
  {
    "name": "Portfolio with Pre-uploaded Media",
    "description": "Application portfolio cr√©√©e avec le workflow en 2 √©tapes : upload m√©dia puis cr√©ation projet",
    "shortDescription": "Portfolio workflow 2-√©tapes",
    "isPublished": true,
    "featured": true,
    "repositoryLink": "https://github.com/user/2step-portfolio",
    "projectLink": "https://2step-portfolio.example.com",
    "techStack": [
      {
        "technology": "React",
        "iconUrl": "https://cdn.jsdelivr.net/gh/devicons/devicon/icons/react/react-original.svg"
      },
      {
        "technology": "S3",
        "iconUrl": "https://cdn.jsdelivr.net/gh/devicons/devicon/icons/amazonwebservices/amazonwebservices-original.svg"
      }
    ],
    "media": [
      "{{uploaded_media_id_1}}"
    ]
  }
}

script:post-response {
  bru.setEnvVar('two_step_project_id', res.body.id);
}

tests {
  test("should create project with pre-uploaded media", function() {
    expect(res.getStatus()).to.equal(201);
    expect(res.getBody()).to.have.property('id');
    expect(res.getBody()).to.have.property('name');
    expect(res.getBody().name).to.equal('Portfolio with Pre-uploaded Media');
  });
  
  test("should have associated media", function() {
    expect(res.getBody()).to.have.property('media');
    expect(res.getBody().media).to.be.an('array');
    expect(res.getBody().media.length).to.equal(1);
    
    const media = res.getBody().media[0];
    expect(media.id).to.equal(bru.getEnvVar('uploaded_media_id_1'));
    expect(media.url).to.include('s3.amazonaws.com');
    expect(media.alt).to.equal('Main project screenshot');
  });
  
  test("should have tech stack", function() {
    expect(res.getBody()).to.have.property('techStack');
    expect(res.getBody().techStack).to.be.an('array');
    expect(res.getBody().techStack.length).to.equal(2);
  });
}

docs {
  # Step 2: Create Project with Media ID
  
  **Workflow 2-Step** - √âtape 2 sur 2
  
  ## üéØ Objectif  
  Cr√©ation d'un projet en r√©f√©ren√ßant un m√©dia d√©j√† upload√© par son ID.
  
  ## üì• Pr√©requis
  - ‚úÖ Ex√©cuter "1. Upload Media" d'abord
  - ‚úÖ Variable `uploaded_media_id_1` doit √™tre d√©finie
  
  ## üì§ Ce que fait ce test
  - ‚úÖ Cr√©e un projet avec r√©f√©rence m√©dia par ID
  - ‚úÖ Valide que le m√©dia existe
  - ‚úÖ Associe le m√©dia au projet  
  - ‚úÖ Traite la tech stack normalement
  
  ## üóÇÔ∏è Payload simplifi√©
  ```json
  {
    "media": ["id-du-media-existant"]
  }
  ```
  
  ## ‚úÖ Avantages
  - **Performance**: Pas de re-upload
  - **R√©utilisabilit√©**: M√™me m√©dia pour plusieurs projets
  - **Flexibilit√©**: Composition libre des m√©dias
  
  **Note**: Ce workflow est maintenant le standard recommand√©.
}