meta {
  name: Create project (JSON format)
  type: http
  seq: 2
}

post {
  url: {{base_url}}/projects
  body: json
  auth: bearer
}

auth:bearer {
  token: {{jwt_token}}
}

body:json {
  {
    "name": "Portfolio Next.js",
    "description": "Application de portfolio construite avec Next.js, NestJS et PostgreSQL. D√©ploiement sur Vercel, CI/CD via GitHub Actions.",
    "shortDescription": "Portfolio full‚Äëstack Next.js/NestJS",
    "repositoryLink": "https://github.com/username/portfolio",
    "projectLink": "https://portfolio.example.com",
    "isPublished": true,
    "featured": false,
    "media": [],
    "techStack": [
      {
        "technology": "Next.js",
        "iconUrl": "https://cdn.jsdelivr.net/gh/devicons/devicon/icons/nextjs/nextjs-original.svg"
      }
    ]
  }
}

script:post-response {
  bru.setEnvVar('project_id',res.body.id)
}

tests {
  test("should create project successfully with valid auth", function() {
    expect(res.getStatus()).to.be.oneOf([201, 401]);
    
    if (res.getStatus() === 201) {
      expect(res.getBody()).to.have.property('id');
      expect(res.getBody()).to.have.property('name');
      expect(res.getBody().name).to.equal('Portfolio Next.js');
    } else {
      console.log("‚ö†Ô∏è Authentication failed - Update jwt_token in environment");
    }
  });
  
  test("should have empty media array when authenticated", function() {
    if (res.getStatus() === 201) {
      expect(res.getBody()).to.have.property('media');
      expect(res.getBody().media).to.be.an('array');
      expect(res.getBody().media.length).to.equal(0);
    }
  });
  
  test("should have tech stack when authenticated", function() {
    if (res.getStatus() === 201) {
      expect(res.getBody()).to.have.property('techStack');
      expect(res.getBody().techStack).to.be.an('array');
      expect(res.getBody().techStack.length).to.equal(1);
      expect(res.getBody().techStack[0].technology).to.equal('Next.js');
    }
  });
}

docs {
  # Create Project (Standard JSON Workflow) - üîê REQUIRES AUTHENTICATION
  
  ‚ö†Ô∏è **AUTHENTICATION REQUIRED**: This endpoint now requires a valid JWT token from AWS Cognito.
  
  ‚úÖ **CURRENT WORKFLOW**: Standard JSON format for project creation without media.
  
  ## Authentication Setup:
  1. Configure `jwt_token` variable in Bruno environment
  2. Get JWT token from AWS Cognito (see Authentication folder)
  3. Token is automatically added as Bearer token
  
  ## 2-Step Workflow:
  1. **For projects with media**: 
     - First: `POST /media/upload` to upload files (requires auth)
     - Then: Use media IDs in this endpoint's `media` array
  
  2. **For projects without media**: 
     - Direct creation with empty `media` array (this test)
  
  ## Changes from previous version:
  - ‚úÖ Back to JSON format (no more multipart)
  - ‚úÖ Media field expects array of complete MediaDTO objects or IDs
  - ‚úÖ Clean separation: media upload ‚Üî project creation
  - ‚úÖ Tech stack handling unchanged
  - üîê **NEW**: JWT Authentication required
  
  ## Media Integration:
  - Upload media first using `/media/upload` (requires auth)
  - Include media objects with valid IDs in `media` array
  - System validates media existence before project creation
  
  **For projects with media**: See "2-Step Workflow" tests.
  **For authentication**: See Authentication folder.
}
